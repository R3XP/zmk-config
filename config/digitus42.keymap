
/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/outputs.h>

#define DE_A        A                  // A
#define DE_B        B                  // B
#define DE_C        C                  // C
#define DE_D        D                  // D
#define DE_E        E                  // E
#define DE_F        F                  // F
#define DE_G        G                  // G
#define DE_H        H                  // H
#define DE_I        I                  // I
#define DE_J        J                  // J
#define DE_K        K                  // K
#define DE_L        L                  // L
#define DE_M        M                  // M
#define DE_N        N                  // N
#define DE_O        O                  // O
#define DE_P        P                  // P
#define DE_Q        Q                  // Q
#define DE_R        R                  // R
#define DE_S        S                  // S
#define DE_T        T                  // T
#define DE_U        U                  // U
#define DE_V        V                  // V
#define DE_W        W                  // W
#define DE_X        X                  // X
#define DE_Y        Z                  // Y
#define DE_Z        Y                  // Z

#define DE_DOT      PERIOD             // .
#define DE_COMM     COMMA              // ,
#define DE_MINS     SLASH              // -

#define DE_AE       SINGLE_QUOTE       // Ä
#define DE_OE       SEMICOLON          // Ö
#define DE_UE       LEFT_BRACKET       // Ü
#define DE_SS       MINUS              // ß

#define DE_CIRC     GRAVE             // ^ (dead)
#define DE_EXLM     LS(NUMBER_1)      // !
#define DE_DQUO     LS(NUMBER_2)      // "
#define DE_DLR      LS(NUMBER_4)      // $
#define DE_AMPR     LS(NUMBER_6)      // &
#define DE_PERC     LS(NUMBER_5)      // %

#define DE_PIPE     RA(DE_LABK)       // |
#define DE_AT       RA(DE_Q)          // @
#define DE_TILD     RA(DE_PLUS)       // ~
#define DE_EURO     RA(DE_E)          // €
#define DE_PLUS     RIGHT_BRACKET     // +
#define DE_ASTR     LS(DE_PLUS)       // *
#define DE_DEG      LS(DE_CIRC)       // °
#define DE_SECT     LS(NUMBER_3)      // §

#define DE_LPRN     LS(NUMBER_8)      // (
#define DE_RPRN     LS(NUMBER_9)      // )
#define DE_LCBR     RA(NUMBER_7)      // {
#define DE_RCBR     RA(NUMBER_0)      // }
#define DE_LBRC     RA(NUMBER_8)      // [
#define DE_RBRC     RA(NUMBER_9)      // ]
#define DE_LABK     NON_US_BACKSLASH  // <
#define DE_RABK     LS(DE_LABK)       // >
#define DE_ACUT     EQUAL             // ´ (dead)
#define DE_HASH     NON_US_HASH       // #
#define DE_COLN     LS(DE_DOT)        // :
#define DE_SLSH     LS(NUMBER_7)      // /
#define DE_EQL      LS(NUMBER_0)      // =
#define DE_QUES     LS(DE_SS)         // ?
#define DE_GRV      LS(DE_ACUT)       // ` (dead)
#define DE_QUOT     LS(DE_HASH)       // '
#define DE_SCLN     LS(DE_COMM)       // ;
#define DE_UNDS     LS(DE_MINS)       // _
#define DE_BSLS     RA(DE_SS)         // (backslash)


#define DEFAULT  0
#define SYMBOL   1
#define NAV      2
#define CONTROL  3
#define LOCK     4



/ {
    combos {
        compatible = "zmk,combos";
        combo_goto_home {
            timeout-ms = <10>;
            key-positions = <15 16 19 20>;
            bindings = <&to DEFAULT>;
        };
        combo_goto_lock {
            timeout-ms = <50>;
            key-positions = <8 36 37 38 39 40 41>;
            bindings = <&to LOCK>;
        };
        combo_exit_lock {
            timeout-ms = <50>;
            key-positions = <13 14 15 16 19 20 21 22>;
            layers = <LOCK>;
            bindings = <&to DEFAULT>;
        };
        combo_control {
            timeout-ms = <50>;
            key-positions = <0 12 24>;
            bindings = <&tog CONTROL>;
        };
    };


    behaviors {
        mtog: move_or_toggle {
            compatible = "zmk,behavior-hold-tap";
            label = "MOVE_OR_TOGGLE";
            #binding-cells = <2>;
            tapping-term-ms = <300>;
            bindings = <&mo>, <&tog>;
	    retro-tap;
        };
        td2: double_dance {
            compatible = "zmk,behavior-tap-dance";
            label = "TAP_DANCE_DOUBLE";
            #binding-cells = <2>;
            tapping-term-ms = <300>;
            bindings = <&kp>, <&kp>;
        };
        sd2: sticky_double_dance {
            compatible = "zmk,behavior-tap-dance";
            label = "STICKY_TAP_DANCE_DOUBLE";
            #binding-cells = <2>;
            tapping-term-ms = <300>;
            bindings = <&kp>, <&sk>;
        };
    };


    keymap {
        compatible = "zmk,keymap";


        default_layer {
            bindings = <
   &kp TAB   &kp J   &kp D             &kp U             &kp A               &kp X                   &kp P       &kp H      &kp L    &kp M   &kp W  &kp BSPC
 &kp LCTRL   &kp C   &kp T             &kp I             &kp E               &kp O                   &kp B       &kp N      &kp R    &kp S   &kp G     &kp Q
     &none   &kp F   &kp V  &kp LEFT_BRACKET  &kp SINGLE_QUOTE            &kp SEMI                   &kp Z       &kp Y  &kp COMMA  &kp DOT   &kp K     &none
                               &mtog NAV NAV         &kp SPACE &mtog SYMBOL SYMBOL          &kp LEFT_SHIFT  &kp LSHIFT  &kp ALT
            >;
        };

        

        layer_symbol {
            bindings = <
   &kp TAB           &kp N1  &kp LS(SLASH)     &kp RA(NUMBER_8)       &kp RA(NUMBER_9)      &kp GRAVE                   &kp EXCL   &kp NON_US_BSLH  &kp LS(NON_US_BSLH)  &kp RIGHT_PARENTHESIS      &kp LS(N6)   &kp BSPC
    &tog 2    &kp RA(MINUS)     &kp LS(N7)     &kp RA(NUMBER_7)       &kp RA(NUMBER_8)   &kp LS(PLUS)              &kp LS(MINUS)  &kp LS(NUMBER_8)     &kp LS(NUMBER_9)              &kp SLASH  &kp LS(PERIOD)  &kp RA(Q)
 &kp LSHFT  &kp NON_US_HASH     &kp LS(N4)  &kp RA(NON_US_BSLH)  &kp RA(RIGHT_BRACKET)  &kp LS(EQUAL)          &kp RIGHT_BRACKET  &kp LS(NUMBER_5)           &kp LS(N2)    &kp LS(NON_US_HASH)   &kp LS(COMMA)  &kp LCTRL
                                                       &kp LGUI              &kp LCTRL          &mo 1                    &kp RET         &kp LCTRL             &kp RALT
            >;
        };



        layer_navigation {
            bindings = <
    &kp TAB      &kp EXCL   &kp BSPC    &kp UP         &kp DEL       &kp PRCNT         &kp CARET    &kp N7    &kp N8  &kp N9  &kp RPAR   &kp BSPC
    &kp LCTRL    &kp HOME   &kp LEFT    &kp DOWN       &kp RIGHT     &kp END           &kp ALT      &kp N4    &kp N5  &kp N6  &kp BSLH  &kp GRAVE
    &kp LSHFT    &kp LCTRL  &kp LCTRL   &kp LCTRL      &kp ENTER     &kp LCTRL         &kp UNDER    &kp N1    &kp N2  &kp N3  &kp PIPE  &kp TILDE
                                        &sd2 ALT LGUI  &trans        &to 1             &kp RET      &kp N0    &kp ALT
            >;
        };



        layer_control {
            bindings = <
 &trans       &trans  &trans  &bt BT_CLR    &bt BT_PRV    &bt BT_NXT            &bt BT_PRV    &bt BT_NXT    &bt BT_CLR       &trans       &trans  &trans
 &reset       &trans  &trans      &trans  &out OUT_USB  &out OUT_BLE          &out OUT_BLE  &out OUT_USB        &trans       &trans       &trans  &reset
 &trans  &bootloader  &trans      &trans        &trans        &trans                &trans  &bt BT_SEL 0  &bt BT_SEL 1 &bt BT_SEL 2  &bootloader  &trans
                                  &trans        &trans        &trans                &trans        &trans        &trans
            >;
        };



        layer_lock {
            bindings = <
  &none   &none   &none   &none   &none   &none           &none   &none   &none   &none   &none   &none
  &none   &none   &none   &none   &none   &none           &none   &none   &none   &none   &none   &none
  &none   &none   &none   &none   &none   &none           &none   &none   &none   &none   &none   &none
                          &none   &none   &none           &none   &none   &none
            >;
        };

    };
};
