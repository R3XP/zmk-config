
/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/outputs.h>

#define DE_A        A                  // A
#define DE_B        B                  // B
#define DE_C        C                  // C
#define DE_D        D                  // D
#define DE_E        E                  // E
#define DE_F        F                  // F
#define DE_G        G                  // G
#define DE_H        H                  // H
#define DE_I        I                  // I
#define DE_J        J                  // J
#define DE_K        K                  // K
#define DE_L        L                  // L
#define DE_M        M                  // M
#define DE_N        N                  // N
#define DE_O        O                  // O
#define DE_P        P                  // P
#define DE_Q        Q                  // Q
#define DE_R        R                  // R
#define DE_S        S                  // S
#define DE_T        T                  // T
#define DE_U        U                  // U
#define DE_V        V                  // V
#define DE_W        W                  // W
#define DE_X        X                  // X
#define DE_Y        Z                  // Y
#define DE_Z        Y                  // Z

#define DE_DOT      PERIOD             // .
#define DE_COMM     COMMA              // ,
#define DE_MINS     SLASH              // -

#define DE_AE       SINGLE_QUOTE       // Ä
#define DE_OE       SEMICOLON          // Ö
#define DE_UE       LEFT_BRACKET       // Ü
#define DE_SS       MINUS              // ß

#define DE_CIRC     GRAVE             // ^ (dead)
#define DE_EXLM     LS(NUMBER_1)      // !
#define DE_DQUO     LS(NUMBER_2)      // "
#define DE_DLR      LS(NUMBER_4)      // $
#define DE_AMPR     LS(NUMBER_6)      // &
#define DE_PERC     LS(NUMBER_5)      // %

#define DE_PIPE     RA(DE_LABK)       // |
#define DE_AT       RA(DE_Q)          // @
#define DE_TILD     RA(DE_PLUS)       // ~
#define DE_EURO     RA(DE_E)          // €
#define DE_PLUS     RIGHT_BRACKET     // +
#define DE_ASTR     LS(DE_PLUS)       // *
#define DE_DEG      LS(DE_CIRC)       // °
#define DE_SECT     LS(NUMBER_3)      // §

#define DE_LPRN     LS(NUMBER_8)      // (
#define DE_RPRN     LS(NUMBER_9)      // )
#define DE_LCBR     RA(NUMBER_7)      // {
#define DE_RCBR     RA(NUMBER_0)      // }
#define DE_LBRC     RA(NUMBER_8)      // [
#define DE_RBRC     RA(NUMBER_9)      // ]
#define DE_LABK     NON_US_BACKSLASH  // <
#define DE_RABK     LS(DE_LABK)       // >
#define DE_ACUT     EQUAL             // ´ (dead)
#define DE_HASH     NON_US_HASH       // #
#define DE_COLN     LS(DE_DOT)        // :
#define DE_SLSH     LS(NUMBER_7)      // /
#define DE_EQL      LS(NUMBER_0)      // =
#define DE_QUES     LS(DE_SS)         // ?
#define DE_GRV      LS(DE_ACUT)       // ` (dead)
#define DE_QUOT     LS(DE_HASH)       // '
#define DE_SCLN     LS(DE_COMM)       // ;
#define DE_UNDS     LS(DE_MINS)       // _
#define DE_BSLS     RA(DE_SS)         // (backslash)


#define DEFAULT  0
#define SYMBOL   2
#define NAV      4
#define CONTROL  6
#define LOCK     8


#define xxxCOMBO(NAME, BINDINGS, KEYPOS, LAYERS, TERM) \
        combo_##NAME { \
            timeout-ms = <TERM>; \
            bindings = <BINDINGS>; \
            key-positions = <KEYPOS>; \
            layers = <LAYERS>; \
        };

        
#define DANCE(NAME, B1, B2, B3, TERM) \
        d_##NAME: ##NAME { \
            compatible = "zmk,behavior-tap-dance"; \
            label = "NAME"; \
            #binding-cells = <0>; \
            tapping-term-ms = <TERM>; \
            bindings = <B1>, <B2>, <B3>; \
        };

// | SW0  | SW1  | SW2  | SW3  | SW4  | SW5  |                 | SW6  | SW7  | SW8  | SW9  | SW10 | SW11 |
// | SW12 | SW13 | SW14 | SW15 | SW16 | SW17 |                 | SW18 | SW19 | SW20 | SW21 | SW22 | SW23 |
// | SW24 | SW25 | SW26 | SW27 | SW28 | SW29 |                 | SW30 | SW31 | SW32 | SW33 | SW34 | SW35 |
// |      |      |      |      | SW36 | SW37 | SW38 |   | SW39 | SW40 | SW41 |      |      |      |      |



/ {
    combos {
        compatible = "zmk,combos";
        combo_goto_home {
            timeout-ms = <70>;
            key-positions = <15 16 19 20>;
            bindings = <&to DEFAULT>;
        };
        combo_goto_lock {
            timeout-ms = <50>;
            key-positions = <8 36 37 38 39 40 41>;
            bindings = <&to LOCK>;
        };
        combo_control {
            timeout-ms = <50>;
            key-positions = <0 12 24>;
            bindings = <&tog CONTROL>;
        };
    };



    behaviors {
        mtog: move_or_toggle {
            compatible = "zmk,behavior-hold-tap";
            label = "MOVE_OR_TOGGLE";
            #binding-cells = <2>;
            tapping-term-ms = <300>;
            bindings = <&mo>, <&tog>;
	    retro-tap;
        };
        td0: sticky_double_dance {
            compatible = "zmk,behavior-tap-dance";
            label = "STICKY_TAP_DANCE_DOUBLE";
            #binding-cells = <0>;
            tapping-term-ms = <400>;
            bindings = <&kp LALT>, <&kp LGUI>;
        };
        tdtabesc: tab_esc_dance {
            compatible = "zmk,behavior-tap-dance";
            label = "ESCAPE_DANCE";
            #binding-cells = <0>;
            tapping-term-ms = <300>;
            bindings = <&kp TAB>, <&kp ESC>;
        };
        DANCE(esctab, &kp ESC   , &kp TAB   , &none, 300)
        DANCE(altgui, &kp LALT  , &kp LGUI  , &none, 300)
        DANCE(symbol, &mo SYMBOL, &to SYMBOL, &none, 300)
        DANCE(nav   , &mo NAV   , &to NAV   , &none, 300)
    };




    
    conditional_layers {
        compatible = "zmk,conditional-layers";
        raise_default {
            if-layers = <DEFAULT 99>;
            then-layer = <1>;
        };
        raise_nav {
            if-layers = <NAV 99>;
            then-layer = <3>;
        };
    };



    keymap {
        compatible = "zmk,keymap";



        layer_default {
            bindings = <
   &d_esctab    &kp J   &kp D  &kp U              &kp A               &kp X                   &kp P       &kp H       &kp L      &kp M     &kp W    &kp BSPC
   &kp LCTRL    &kp C   &kp T  &kp I              &kp E               &kp O                   &kp B       &kp N       &kp R      &kp S     &kp G    &kp Q
   &kp LSHIFT   &kp F   &kp V  &kp LEFT_BRACKET   &kp SINGLE_QUOTE    &kp SEMI                &kp Z       &kp Y       &kp COMMA  &kp DOT   &kp K    &none
                               &d_nav             &kp SPACE           &d_symbol               &kp LSHFT   &mo 99  &td0
            >;
        };


        
        layer_default_raised {
            bindings = <
  &trans   &trans   &trans   &kp DE_UE   &kp DE_AE   &trans           &trans   &trans   &trans   &trans     &trans   &trans
  &trans   &trans   &trans   &trans      &kp RET     &kp DE_OE        &trans   &trans   &trans   &kp DE_SS  &trans   &trans
  &trans   &trans   &trans   &trans      &trans      &trans           &trans   &trans   &trans   &trans     &trans   &trans
                             &trans      &trans      &trans           &trans   &trans   &trans
            >;
        };



        layer_symbol {
            bindings = <
    &trans     &trans           &kp LS(SLASH)  &kp RA(NUMBER_8)     &kp RA(NUMBER_9)            &kp GRAVE      &kp EXCL   &kp NON_US_BSLH  &kp LS(NON_US_BSLH)  &kp RIGHT_PARENTHESIS      &kp LS(N6)   &kp BSPC
    &none      &kp RA(MINUS)    &kp LS(N7)     &kp RA(NUMBER_7)     &kp RA(NUMBER_8)            &kp LS(RIGHT_BRACKET)   &kp LS(MINUS)  &kp LS(NUMBER_8)     &kp LS(NUMBER_9)              &kp SLASH  &kp LS(PERIOD)  &kp RA(Q)
    &kp LSHFT  &kp NON_US_HASH  &kp LS(N4)     &kp RA(NON_US_BSLH)  &kp RA(RIGHT_BRACKET)       &kp LS(EQUAL)  &kp RIGHT_BRACKET  &kp LS(NUMBER_5)           &kp LS(N2)    &kp LS(NON_US_HASH)   &kp LS(COMMA)  &kp LCTRL
                                               &kp LGUI             &kp LCTRL                   &mo 1                       &kp RET        &trans             &kp RALT
            >;
        };

        
        layer_symbol_raised {
            bindings = <
  &trans   &trans   &trans   &trans   &trans   &trans           &trans   &trans   &trans   &trans   &trans   &trans
  &trans   &trans   &trans   &trans   &trans   &trans           &trans   &trans   &trans   &trans   &trans   &trans
  &trans   &trans   &trans   &trans   &trans   &trans           &trans   &trans   &trans   &trans   &trans   &trans
                             &trans   &trans   &trans           &trans   &trans   &trans
            >;
        };



        layer_navigation {
            bindings = <
    &kp TAB      &kp EXCL   &kp BSPC    &kp UP         &kp DEL       &kp PRCNT              &kp CARET    &kp N7    &kp N8  &kp N9  &kp RPAR   &kp BSPC
    &kp LCTRL    &kp HOME   &kp LEFT    &kp DOWN       &kp RIGHT     &kp END                &kp LALT     &kp N4    &kp N5  &kp N6  &kp BSLH  &kp GRAVE
    &kp LSHFT    &kp LCTRL  &kp LCTRL   &kp LCTRL      &kp ENTER     &kp LCTRL              &kp UNDER    &kp N1    &kp N2  &kp N3  &kp PIPE  &kp TILDE
                                        &td0           &trans        &to 1                  &kp RET      &trans    &kp N0
            >;
        };


        
        layer_nav_raised {
            bindings = <
  &trans   &trans   &trans   &trans   &trans   &trans           &trans   &trans   &trans   &trans   &trans   &trans
  &trans   &trans   &trans   &trans   &trans   &trans           &trans   &trans   &trans   &trans   &trans   &trans
  &trans   &trans   &trans   &trans   &trans   &trans           &trans   &trans   &trans   &trans   &trans   &trans
                             &trans   &trans   &trans           &trans   &trans   &trans
            >;
        };



        layer_control {
            bindings = <
 &trans       &trans  &trans  &bt BT_CLR    &bt BT_PRV    &bt BT_NXT            &bt BT_PRV    &bt BT_NXT    &bt BT_CLR       &trans       &trans  &trans
 &reset       &trans  &trans      &trans  &out OUT_USB  &out OUT_BLE          &out OUT_BLE  &out OUT_USB        &trans       &trans       &trans  &reset
 &trans  &bootloader  &trans      &trans        &trans        &trans                &trans  &bt BT_SEL 0  &bt BT_SEL 1 &bt BT_SEL 2  &bootloader  &trans
                                  &trans        &trans        &trans                &trans        &trans        &trans
            >;
        };



        layer_qwertz {
            bindings = <
   &kp TAB   &kp Q &kp W &kp E &kp R &kp T   &kp Z &kp U  &kp I     &kp O   &kp P    &kp BSPC
   &kp LCTRL &kp A &kp S &kp D &kp F &kp G   &kp H &kp J  &kp K     &kp L   &kp SEMI &kp SQT
   &kp LSHFT &kp Y &kp X &kp C &kp V &kp B   &kp N &kp M  &kp COMMA &kp DOT &kp FSLH &kp ESC
                  &kp LGUI &mo 1 &kp SPACE   &kp RET &mo 2 &kp RALT
            >;
        };



        layer_lock {
            bindings = <
  &none   &none   &none   &none   &none   &none           &none   &none   &none   &none   &none   &none
  &none   &none   &none   &none   &none   &none           &none   &none   &none   &none   &none   &none
  &none   &none   &none   &none   &none   &none           &none   &none   &none   &none   &none   &none
                          &none   &none   &none           &none   &none   &none
            >;
        };

    };
};
